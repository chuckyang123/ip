package crisp;

import crisp.command.Command;
import crisp.task.TaskList;
import crisp.util.Parser;
import crisp.util.Storage;
import crisp.util.Ui;

/**
 * The {@code Crisp} class represents the main application for the Crisp task manager.
 * It handles initialization of storage, tasks, and user interface, and provides
 * a method to process user input and return responses.
 * <p>
 * Example usage:
 * <pre>
 *     public static void main(String[] args) {
 *         new Crisp().run();
 *     }
 * </pre>
 */
public class Crisp {

    private Storage storage = new Storage("./data/crisp.txt");
    private TaskList tasks;
    private Ui ui = new Ui();
    private boolean isExit = false;

    public boolean isExit() {
        return isExit;
    }

    public void setExit(boolean exit) {
        isExit = exit;
    }
    /**
     * Constructs a new {@code Crisp} application.
     * Attempts to load tasks from storage; if loading fails, initializes an empty task list.
     */
    public Crisp() {
        try {
            tasks = new TaskList(storage.load());
        } catch (Exception e) {
            ui.showError("Failed to load tasks. Starting with empty list.");
            tasks = new TaskList();
        }
    }

    /**
     * Processes a single user input command.
     * <p>
     * Parses the input, executes the corresponding command, and returns the message
     * generated by the command. If an error occurs, returns an error message instead.
     *
     * @param input the user input command string
     * @return the response message to be displayed to the user
     */
    public String getResponse(String input) {
        try {
            Command c = Parser.parse(input);
            c.execute(tasks, ui, storage);
            if (c.isExit()) {
                isExit = true;
            }
            return c.getMessage();
        } catch (NumberFormatException e) {
            return ("OOPS!!! Please provide a valid task number.");
        } catch (IndexOutOfBoundsException e) {
            return ("OOPS!!! The task number you entered does not exist.");
        } catch (Exception e) {
            return " OOPS!!! " + e.getMessage();
        }
    }
}
